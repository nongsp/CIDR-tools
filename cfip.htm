<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CF 优选工具（10线程并发）</title>
    <style>
        :root { --primary: #1a73e8; --success: #28a745; --bg: #f8f9fa; --card: #fff; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; background: var(--bg); }
        .container { max-width: 1000px; margin: 0 auto; background: var(--card); padding: 20px; border-radius: 12px; box-shadow: 0 2px 12px rgba(0,0,0,.1); }
        h1 { text-align: center; color: var(--primary); margin: 0 0 8px; font-size: 1.8rem; }
        .subtitle { text-align: center; color: #666; font-size: .9rem; margin-bottom: 20px; }
        .controls { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 12px; margin-bottom: 16px; padding: 16px; background: #f1f3f5; border-radius: 8px; }
        .control { display: flex; flex-direction: column; }
        label { font-weight: 600; margin-bottom: 4px; color: #333; font-size: .9rem; }
        select, textarea, button { padding: 8px 10px; border: 1px solid #ddd; border-radius: 6px; font-size: .9rem; }
        select, button { cursor: pointer; }
        textarea { resize: vertical; min-height: 90px; font-family: monospace; font-size: .85rem; }
        button { background: var(--primary); color: white; font-weight: 600; }
        button:disabled { background: #ccc; cursor: not-allowed; }
        .checkbox { display: flex; align-items: center; gap: 6px; font-size: .85rem; }
        .status { text-align: center; padding: 8px; font-size: .85rem; color: #555; font-style: italic; }
        .section { margin-top: 16px; }
        .log, .result { width: 100%; height: 160px; padding: 10px; border-radius: 6px; font-family: 'Courier New', monospace; font-size: .8rem; overflow-y: auto; white-space: pre-wrap; }
        .log { border: 1px solid #ddd; background: #fdfdfd; }
        .result { border: 1px solid var(--success); background: #f8fff9; font-weight: 600; }
        .tip { font-size: .75rem; color: #888; margin-top: 4px; }
        .threads { font-weight: bold; color: var(--primary); }
    </style>
</head>
<body>
    <div class="container">
        <h1>CF 优选工具</h1>
        <div class="subtitle">IPv4/IPv6 · 批量 CIDR · <span class="threads">10 线程并发</span> · 400ms 超时</div>

        <div class="controls">
            <div class="control">
                <label for="ip-count">每 CIDR 生成 IP</label>
                <select id="ip-count">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="40">40</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
            <div class="control">
                <label for="port">端口</label>
                <select id="port">
                    <option value="80" selected>80</option>
                    <option value="8880">8880</option>
                    <option value="2052">2052</option>
                    <option value="443">443</option>
                    <option value="8443">8443</option>
                    <option value="2096">2096</option>
                </select>
            </div>
            <div class="control" style="grid-column: span 2;">
                <label for="cidr-input">批量 CIDR（每行一个）</label>
                <textarea id="cidr-input" placeholder="103.21.244.0/22&#10;173.245.48.0/20&#10;2606:4700::/32"></textarea>
                <div class="tip">留空 + 勾选 = 使用默认列表</div>
            </div>
            <div class="control checkbox">
                <input type="checkbox" id="use-default" checked>
                <label for="use-default">默认列表</label>
            </div>
            <div class="control" style="display: flex; gap: 8px; align-self: end;">
                <button id="start">开始</button>
                <button id="stop" disabled>停止</button>
            </div>
        </div>

        <div class="status" id="status">点击“开始”或修改配置后自动运行</div>

        <div class="section">
            <strong>运行日志</strong>
            <div id="log" class="log"></div>
        </div>
        <div class="section">
            <strong>优选结果 (&lt;400ms)</strong>
            <div id="result" class="result">暂无结果</div>
        </div>
    </div>

    <script>
        // === DOM ===
        const $ = id => document.getElementById(id);
        const logEl = $('log'), resultEl = $('result'), statusEl = $('status');
        const ipCount = $('ip-count'), portSel = $('port'), cidrInput = $('cidr-input'), useDefault = $('use-default');
        const startBtn = $('start'), stopBtn = $('stop');

        let isRunning = false, queue = [], data = [], timer = null;
        const CONCURRENCY = 10;  // 10 线程并发

        // === 工具函数 ===
        const log = msg => { logEl.innerHTML += `[${new Date().toLocaleTimeString()}] ${msg}\n`; logEl.scrollTop = logEl.scrollHeight; };
        const updateResult = () => {
            if (!data.length) return resultEl.textContent = '暂无结果';
            data.sort((a,b)=>a.time-b.time);
            resultEl.textContent = data.map(d => `${d.ipv6?'['+d.ip+']':d.ip}:${d.port}#${d.colo}${d.time}ms`).join('\n');
        };
        const updateStatus = (done, total) => {
            statusEl.textContent = `测试中... ${done}/${total} (剩余 ${total-done})`;
        };

        // === IPv4 生成（已修复）===
        const ipToInt = ip => ip.split('.').reduce((a,v,i)=>a + (v<< (24-i*8)), 0);
        const intToIp = n => [(n>>>24)&255, (n>>>16)&255, (n>>>8)&255, n&255].join('.');
        const genIPv4 = (cidr, n) => {
            const [baseIp, prefixStr] = cidr.split('/');
            const prefix = +prefixStr;
            if (!baseIp || prefix < 0 || prefix > 32) return [];
            const base = ipToInt(baseIp);
            const size = 1 << (32 - prefix);
            const start = base + 1;
            const end = base + size - 2;
            if (start > end) return [];
            const set = new Set();
            while (set.size < n && set.size < end - start + 1) {
                const rand = start + Math.floor(Math.random() * (end - start + 1));
                set.add(intToIp(rand));
            }
            return Array.from(set);
        };

        // === IPv6 生成 ===
        const genIPv6 = (cidr, n) => {
            const [ip, p] = cidr.split('/'), prefix = +p;
            if (!ip || prefix > 128) return [];
            const full = ip.split(':').flatMap(h=>h===''?Array(9-ip.split(':').length).fill('0000'):h.padStart(4,'0')).slice(0,8).join('');
            const bits = 128-prefix, ips = new Set();
            while (ips.size < n) {
                let host = ''; for (let i=0;i<bits;i+=4) host += Math.floor(Math.random()*16).toString(16);
                const hex = (full.slice(0,Math.floor(prefix/4)) + host.padEnd(Math.ceil(bits/4),'0').slice(0,Math.ceil(bits/4))).padEnd(32,'0');
                const parts = []; for (let i=0;i<32;i+=4) parts.push(hex.slice(i,i+4));
                const compressed = parts.join(':').replace(/(:0{4}){2,}/g, '::').replace(/^0+/, '').replace(/:0+$/, '');
                if (compressed !== ip) ips.add(compressed);
            }
            return Array.from(ips);
        };
        const genIPs = (cidr, n) => cidr.includes('.') ? genIPv4(cidr,n).map(ip=>({ip,ipv6:false})) : genIPv6(cidr,n).map(ip=>({ip,ipv6:true}));

        // === Ping & Colo ===
        const ping = async (url, timeout=400) => {
            const ctrl = new AbortController(), id = setTimeout(()=>ctrl.abort(), timeout);
            const t0 = performance.now();
            try {
                await fetch(url, {method:'HEAD', mode:'no-cors', signal:ctrl.signal});
                clearTimeout(id);
                return {ok:true, time:+(performance.now()-t0).toFixed(2)};
            } catch (e) {
                clearTimeout(id);
                return {ok:false, time:400, err: e.name==='AbortError'?'超时':e.message};
            }
        };
        const getColo = async (ip, port, ipv6) => {
            const url = `http://${ipv6?'['+ip+']':ip}:${port}/cdn-cgi/trace`;
            const ctrl = new AbortController(), id = setTimeout(()=>ctrl.abort(), 5000);
            try {
                const res = await fetch(url, {signal:ctrl.signal});
                clearTimeout(id);
                if (!res.ok) return 'Err';
                const text = await res.text();
                const m = text.match(/colo=([A-Z]+)/);
                return m ? m[1] : 'Unk';
            } catch { clearTimeout(id); return 'Err'; }
        };

        // === 10 线程并发测试 ===
        const runWorker = async () => {
            while (isRunning && queue.length > 0) {
                const item = queue.shift();
                const {ip, port, ipv6} = item;
                const display = ipv6 ? `[${ip}]` : ip;
                log(`测试 ${display}:${port}`);
                const r = await ping(`http://${display}:${port}/`);
                if (r.ok && r.time < 400) {
                    data.push({ip, port, time:r.time, ipv6, colo:'...' });
                    log(`  成功 ${r.time}ms`);
                    updateResult();
                } else log(`  跳过 ${r.time}ms ${r.err?'('+r.err+')':''}`);
                updateStatus(total - queue.length, total);
            }
        };

        let total = 0;
        const startWorkers = () => {
            const workers = [];
            for (let i = 0; i < CONCURRENCY; i++) {
                workers.push(runWorker());
            }
            return Promise.allSettled(workers);
        };

        // === 获取 colo 并发 ===
        const fetchColos = async () => {
            if (!data.length) return;
            log(`\n获取 ${data.length} 个 colo...`);
            const promises = data.map(async (d, i) => {
                if (!isRunning) return;
                const disp = d.ipv6?`[${d.ip}]`:d.ip;
                log(`  获取 ${disp}:${d.port} colo...`);
                const colo = await getColo(d.ip, d.port, d.ipv6);
                if (['Err','Unk'].includes(colo)) {
                    log(`    失败，已移除`);
                    return null;
                } else {
                    log(`    成功 ${colo}`);
                    d.colo = colo;
                    return d;
                }
            });
            const results = await Promise.all(promises);
            data = results.filter(r => r !== null);
            updateResult();
        };

        // === 结束 ===
        const end = () => { log(`\n完成！优质IP: ${data.length}`); statusEl.textContent = '扫描完成'; stop(); };

        // === 主函数 ===
        const start = async () => {
            if (isRunning) return;
            clear(); statusEl.textContent = '准备中...';
            const cidrs = new Set();
            cidrInput.value.trim().split('\n').forEach(l=>l.trim()&&l[0]!=='#'&&cidrs.add(l.trim()));
            if (useDefault.checked) {
                try {
                    const res = await fetch('https://raw.githubusercontent.com/nongsp/CIDR-tools/refs/heads/main/CF-CIDR.txt');
                    if (res.ok) (await res.text()).split('\n').forEach(l=>l.trim()&&l[0]!=='#'&&cidrs.add(l.trim()));
                } catch (e) { log(`默认列表加载失败: ${e.message}`); }
            }
            if (!cidrs.size) return log('错误: 无有效 CIDR'), statusEl.textContent = '请填写 CIDR 或勾选默认';
            const n = +ipCount.value, port = +portSel.value;
            queue = []; 
            for (const c of cidrs) {
                const ips = genIPs(c, n);
                if (ips.length) { log(`从 ${c.includes(':')?'IPv6':'IPv4'} ${c} 生成 ${ips.length} IP`); queue.push(...ips.map(i=>({...i,port}))); }
            }
            total = queue.length;
            if (!total) return log('错误: 未生成任何IP'), statusEl.textContent = '生成失败';
            log(`共 ${total} 个IP，启动 ${CONCURRENCY} 线程并发测试端口 ${port}...`);
            isRunning = true; startBtn.disabled = true; stopBtn.disabled = false;
            statusEl.textContent = `测试中... 0/${total}`;
            await startWorkers();
            if (isRunning) await fetchColos();
            if (isRunning) end();
        };

        const stop = () => { isRunning = false; queue = []; stopBtn.disabled = true; startBtn.disabled = false; statusEl.textContent = '已停止'; };
        const clear = () => { logEl.textContent = ''; resultEl.textContent = '暂无结果'; data = []; };

        // === 事件 ===
        const delayStart = () => { clearTimeout(timer); statusEl.textContent = '2秒后自动开始...'; timer = setTimeout(start, 2000); };
        [ipCount, portSel, cidrInput, useDefault].forEach(el => el.addEventListener('change', delayStart));
        cidrInput.addEventListener('input', delayStart);
        startBtn.onclick = start; stopBtn.onclick = stop;

        // === 初始化 ===
        window.onload = () => {
             cidrInput.value = `104.16.244.0/22\n104.17.48.0/20\n104.18.0/20\n162.59.138.0/20\n172.67.40.0/20\n2606:4700::/32`;
            statusEl.textContent = '点击“开始”或修改配置后自动运行';
        };
    </script>
</body>
</html>
