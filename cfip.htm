<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CF 优选 + 1A+1AAAA 自动更新</title>
    <style>
        :root { --primary: #1a73e8; --success: #28a745; --danger: #dc3545; --bg: #f8f9fa; --card: #fff; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; background: var(--bg); }
        .container { max-width: 1100px; margin: 0 auto; background: var(--card); padding: 20px; border-radius: 12px; box-shadow: 0 2px 12px rgba(0,0,0,.1); }
        h1 { text-align: center; color: var(--primary); margin: 0 0 8px; font-size: 1.8rem; }
        .subtitle { text-align: center; color: #666; font-size: .9rem; margin-bottom: 20px; }
        .controls { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px; margin-bottom: 16px; padding: 16px; background: #f1f3f5; border-radius: 8px; }
        .control { display: flex; flex-direction: column; }
        label { font-weight: 600; margin-bottom: 4px; color: #333; font-size: .9rem; }
        input, select, textarea, button { padding: 8px 10px; border: 1px solid #ddd; border-radius: 6px; font-size: .9rem; }
        select, button { cursor: pointer; }
        textarea { resize: vertical; min-height: 90px; font-family: monospace; font-size: .85rem; }
        button { background: var(--primary); color: white; font-weight: 600; }
        button:disabled { background: #ccc; cursor: not-allowed; }
        .checkbox { display: flex; align-items: center; gap: 6px; font-size: .85rem; }
        .status { text-align: center; padding: 8px; font-size: .85rem; color: #555; font-style: italic; }
        .section { margin-top: 16px; }
        .log, .result { width: 100%; height: 160px; padding: 10px; border-radius: 6px; font-family: 'Courier New', monospace; font-size: .8rem; overflow-y: auto; white-space: pre-wrap; }
        .log { border: 1px solid #ddd; background: #fdfdfd; }
        .result { border: 1px solid var(--success); background: #f8fff9; font-weight: 600; }
        .tip { font-size: .75rem; color: #888; margin-top: 4px; }
        .ddns { background: #e3f2fd; padding: 12px; border-radius: 8px; margin-top: 16px; }
        .ddns h3 { margin: 0 0 12px; color: var(--primary); font-size: 1rem; }
        .ddns-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 10px; }
        .best { background: #fff3cd; padding: 8px; border-radius: 6px; font-weight: bold; color: #856404; }
        .success-msg { color: var(--success); font-weight: bold; }
        .error-msg { color: var(--danger); font-weight: bold; }
        .auto-update { display: flex; align-items: center; gap: 6px; }
        .required { color: #d32f2f; font-size: .7rem; margin-top: 2px; }
        .line-select { font-size: .8rem; }
    </style>
</head>
<body>
    <div class="container">
        <h1>CF 优选 + 1A+1AAAA 自动更新</h1>
        <div class="subtitle">IPv4/IPv6 · 10线程 · 400ms超时 · <strong>每线路仅 1A + 1AAAA</strong></div>

        <div class="controls">
            <div class="control">
                <label for="ip-count">每 CIDR 生成 IP</label>
                <select id="ip-count">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="40">40</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
            <div class="control">
                <label for="port">端口</label>
                <select id="port">
                    <option value="80" selected>80</option>
                    <option value="8880">8880</option>
                    <option value="2052">2052</option>
                    <option value="443">443</option>
                    <option value="8443">8443</option>
                    <option value="2096">2096</option>
                </select>
            </div>
            <div class="control" style="grid-column: span 2;">
                <label for="cidr-input">批量 CIDR（每行一个）</label>
                <textarea id="cidr-input" placeholder="103.21.244.0/22&#10;173.245.48.0/20&#10;2606:4700::/32"></textarea>
                <div class="tip">留空 + 勾选 = 使用默认列表</div>
            </div>
            <div class="control checkbox">
                <input type="checkbox" id="use-default" checked>
                <label for="use-default">默认列表</label>
            </div>
            <div class="control" style="display: flex; gap: 8px; align-self: end;">
                <button id="start">开始优选</button>
                <button id="stop" disabled>停止</button>
            </div>
        </div>

        <div class="status" id="status">页面加载后 3 秒自动开始优选...</div>

        <div class="section">
            <strong>运行日志</strong>
            <div id="log" class="log"></div>
        </div>
        <div class="section">
            <strong>优选结果 (&lt;400ms)</strong>
            <div id="result" class="result">暂无结果</div>
        </div>

        <!-- DDNS 配置 -->
        <div class="ddns">
            <h3>阿里云 DDNS 配置</h3>
            <div class="ddns-grid">
                <div class="control">
                    <label for="access-key-id">AccessKey ID <span class="required">*</span></label>
                    <input type="password" id="access-key-id" placeholder="LTAIxxx">
                </div>
                <div class="control">
                    <label for="access-key-secret">AccessKey Secret <span class="required">*</span></label>
                    <input type="password" id="access-key-secret" placeholder="xxx">
                </div>
                <div class="control">
                    <label for="domain">主域名 <span class="required">*</span></label>
                    <input type="text" id="domain" placeholder="example.com">
                </div>
                <div class="control">
                    <label for="subdomain-v4">A记录子域名</label>
                    <input type="text" id="subdomain-v4" placeholder="home">
                    <div class="tip">将更新 <strong>1 条 A 记录</strong></div>
                </div>
                <div class="control">
                    <label for="subdomain-v6">AAAA记录子域名</label>
                    <input type="text" id="subdomain-v6" placeholder="home6">
                    <div class="tip">将更新 <strong>1 条 AAAA 记录</strong></div>
                </div>
                <div class="control">
                    <label for="line-type">解析线路</label>
                    <select id="line-type" class="line-select">
                        <option value="default">默认（全部线路）</option>
                        <option value="telecom">中国电信</option>
                        <option value="unicom">中国联通</option>
                        <option value="mobile" selected>中国移动</option>
                    </select>
                </div>
                <div class="control auto-update">
                    <input type="checkbox" id="auto-update" checked>
                    <label for="auto-update">优选完毕自动更新DDNS</label>
                </div>
            </div>

            <div id="best-result" style="margin-top: 16px;"></div>
            <div id="ddns-log" style="margin-top: 8px; font-size: .8rem;"></div>
        </div>
    </div>

    <!-- 先加载 CryptoJS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script>
        // === DOM ===
        const $ = id => document.getElementById(id);
        const logEl = $('log'), resultEl = $('result'), statusEl = $('status');
        const ipCount = $('ip-count'), portSel = $('port'), cidrInput = $('cidr-input'), useDefault = $('use-default');
        const startBtn = $('start'), stopBtn = $('stop');
        const akId = $('access-key-id'), akSecret = $('access-key-secret');
        const domain = $('domain'), subV4 = $('subdomain-v4'), subV6 = $('subdomain-v6');
        const lineType = $('line-type');
        const autoUpdate = $('auto-update');
        const bestResult = $('best-result'), ddnsLog = $('ddns-log');

        let isRunning = false, queue = [], data = [], autoStartTimer = null;
        const CONCURRENCY = 10;

        // === 工具函数 ===
        const log = msg => { logEl.innerHTML += `[${new Date().toLocaleTimeString()}] ${msg}\n`; logEl.scrollTop = logEl.scrollHeight; };
        const updateResult = () => {
            if (!data.length) return resultEl.textContent = '暂无结果';
            data.sort((a,b)=>a.time-b.time);
            resultEl.textContent = data.map(d => `${d.ipv6?'['+d.ip+']':d.ip}:${d.port}#${d.colo}${d.time}ms`).join('\n');
        };
        const updateStatus = (done, total) => statusEl.textContent = `测试中... ${done}/${total} (剩余 ${total-done})`;

        // === 配置完整性检查 ===
        const isDDNSConfigValid = () => {
            return akId.value.trim() && akSecret.value.trim() && domain.value.trim();
        };

        // === 线路映射表（官方标准值）===
        const LINE_MAP = { 'default': 'default', 'telecom': 'telecom', 'unicom': 'unicom', 'mobile': 'mobile' };
        const LINE_NAMES = { 'default': '默认', 'telecom': '中国电信', 'unicom': '中国联通', 'mobile': '中国移动' };

        // === 阿里云 API 签名 ===
        const sign = (params, method = 'GET') => {
            const sorted = Object.keys(params).sort().map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&');
            const stringToSign = `${method}&${encodeURIComponent('/')}&${encodeURIComponent(sorted)}`;
            const key = akSecret.value + '&';
            const hash = CryptoJS.HmacSHA1(stringToSign, key);
            return encodeURIComponent(CryptoJS.enc.Base64.stringify(hash));
        };

        // === 查询域名解析记录（精确匹配线路）===
        const queryRecordId = async (rr, type, lineKey) => {
            if (!rr) return null;
            const line = LINE_MAP[lineKey];
            const params = {
                Action: 'DescribeDomainRecords',
                Format: 'JSON',
                Version: '2015-01-09',
                AccessKeyId: akId.value,
                Timestamp: new Date().toISOString().replace(/\.\d+Z$/, 'Z'),
                SignatureMethod: 'HMAC-SHA1',
                SignatureVersion: '1.0',
                SignatureNonce: Date.now() + Math.random() + '',
                DomainName: domain.value
            };
            params.Signature = sign(params);
            const url = 'https://alidns.aliyuncs.com/?' + Object.keys(params).map(k=>`${k}=${params[k]}`).join('&');
            try {
                const res = await fetch(url);
                const json = await res.json();
                if (!json.DomainRecords || !json.DomainRecords.Record) return null;
                const record = json.DomainRecords.Record.find(r => 
                    r.RR === rr && 
                    r.Type === type && 
                    r.Line === line
                );
                return record ? record.RecordId : null;
            } catch (e) {
                log(`查询${type}记录失败: ${e.message}`);
                return null;
            }
        };

        // === 添加 DNS 记录（指定线路）===
        const addRecord = async (rr, type, value, lineKey) => {
            const line = LINE_MAP[lineKey];
            const lineName = LINE_NAMES[lineKey];
            const params = {
                Action: 'AddDomainRecord',
                Format: 'JSON',
                Version: '2015-01-09',
                AccessKeyId: akId.value,
                Timestamp: new Date().toISOString().replace(/\.\d+Z$/, 'Z'),
                SignatureMethod: 'HMAC-SHA1',
                SignatureVersion: '1.0',
                SignatureNonce: Date.now() + Math.random() + '',
                DomainName: domain.value,
                RR: rr,
                Type: type,
                Value: value,
                Line: line,
                TTL: '600'
            };
            params.Signature = sign(params);
            const url = 'https://alidns.aliyuncs.com/?' + Object.keys(params).map(k=>`${k}=${params[k]}`).join('&');
            try {
                const res = await fetch(url);
                const json = await res.json();
                if (json.RecordId) {
                    log(`${type}记录添加成功 [${lineName}] → ${value}`);
                    return json.RecordId;
                } else {
                    log(`${type}记录添加失败: ${json.Message || '未知错误'}`);
                    return null;
                }
            } catch (e) {
                log(`${type}记录添加请求失败: ${e.message}`);
                return null;
            }
        };

        // === 更新 DNS 记录（指定线路）===
        const updateRecord = async (recordId, rr, type, value, lineKey) => {
            const line = LINE_MAP[lineKey];
            const lineName = LINE_NAMES[lineKey];
            const params = {
                Action: 'UpdateDomainRecord',
                Format: 'JSON',
                Version: '2015-01-09',
                AccessKeyId: akId.value,
                Timestamp: new Date().toISOString().replace(/\.\d+Z$/, 'Z'),
                SignatureMethod: 'HMAC-SHA1',
                SignatureVersion: '1.0',
                SignatureNonce: Date.now() + Math.random() + '',
                RecordId: recordId,
                RR: rr,
                Type: type,
                Value: value,
                Line: line
            };
            params.Signature = sign(params);
            const url = 'https://alidns.aliyuncs.com/?' + Object.keys(params).map(k=>`${k}=${params[k]}`).join('&');
            try {
                const res = await fetch(url);
                const json = await res.json();
                if (json.RecordId) {
                    log(`${type}记录更新成功 [${lineName}] → ${value}`);
                    return true;
                } else {
                    log(`${type}记录更新失败: ${json.Message || '未知错误'}`);
                    return false;
                }
            } catch (e) {
                log(`${type}记录更新请求失败: ${e.message}`);
                return false;
            }
        };

        // === 智能处理单条记录（添加或更新）===
        const upsertRecord = async (rr, type, value, lineKey) => {
            if (!rr || !value) return false;
            const lineName = LINE_NAMES[lineKey];
            log(`处理 ${type} 记录: ${rr}.${domain.value} [${lineName}] → ${value}`);

            const recordId = await queryRecordId(rr, type, lineKey);
            if (recordId) {
                return await updateRecord(recordId, rr, type, value, lineKey);
            } else {
                const newId = await addRecord(rr, type, value, lineKey);
                return newId !== null;
            }
        };

        // === 自动 DDNS 更新（每线路 1A + 1AAAA）===
        const updateDDNS = async () => {
            if (!autoUpdate.checked) return;
            if (!isDDNSConfigValid()) {
                log('DDNS配置不完整，跳过自动更新');
                return;
            }

            const { v4, v6 } = selectBest(); // 改为 selectBest()
            if (!v4 && !v6) {
                log('无合格IP，跳过DDNS更新');
                return;
            }

            const lineKey = lineType.value;
            const lineName = LINE_NAMES[lineKey];
            log(`\n开始自动更新阿里云DDNS（线路：${lineName}）...`);
            const results = [];

            // 处理 A 记录（仅1条）
            if (v4 && subV4.value.trim()) {
                const success = await upsertRecord(subV4.value.trim(), 'A', v4.ip, lineKey);
                results.push(success ? `A记录处理成功 [${lineName}] → ${v4.ip}` : `A记录处理失败`);
            } else if (subV4.value.trim()) {
                log('无IPv4结果，跳过A记录处理');
            }

            // 处理 AAAA 记录（仅1条）
            if (v6 && subV6.value.trim()) {
                const success = await upsertRecord(subV6.value.trim(), 'AAAA', v6.ip, lineKey);
                results.push(success ? `AAAA记录处理成功 [${lineName}] → [${v6.ip}]` : `AAAA记录处理失败`);
            } else if (subV6.value.trim()) {
                log('无IPv6结果，跳过AAAA记录处理');
            }

            ddnsLog.innerHTML = results.map(r => r.includes('成功') ? `<div class="success-msg">${r}</div>` : `<div class="error-msg">${r}</div>`).join('');
        };

        // === 选出延迟最低的 1 个 IPv4 和 1 个 IPv6（恢复原始逻辑）===
        const selectBest = () => {
            const v4 = data.filter(d => !d.ipv6).sort((a,b)=>a.time-b.time)[0];
            const v6 = data.filter(d => d.ipv6).sort((a,b)=>a.time-b.time)[0];
            return { v4, v6 };
        };

        // === 显示最佳结果（仅1个）===
        const showBest = () => {
            const { v4, v6 } = selectBest();
            let html = '';
            if (v4) {
                html += `<div class="best">最佳 IPv4: ${v4.ip}:${v4.port}#${v4.colo} (${v4.time}ms)</div>`;
            }
            if (v6) {
                html += `<div class="best">最佳 IPv6: [${v6.ip}]:${v6.port}#${v6.colo} (${v6.time}ms)</div>`;
            }
            bestResult.innerHTML = html || '<div style="color:#999">暂无合格结果</div>';
        };

        // === IPv4/IPv6 生成 ===
        const ipToInt = ip => ip.split('.').reduce((a,v,i)=>a + (v<< (24-i*8)), 0);
        const intToIp = n => [(n>>>24)&255, (n>>>16)&255, (n>>>8)&255, n&255].join('.');
        const genIPv4 = (cidr, n) => {
            const [baseIp, prefixStr] = cidr.split('/');
            const prefix = +prefixStr;
            if (!baseIp || prefix < 0 || prefix > 32) return [];
            const base = ipToInt(baseIp);
            const size = 1 << (32 - prefix);
            const start = base + 1;
            const end = base + size - 2;
            if (start > end) return [];
            const set = new Set();
            while (set.size < n && set.size < end - start + 1) {
                const rand = start + Math.floor(Math.random() * (end - start + 1));
                set.add(intToIp(rand));
            }
            return Array.from(set);
        };
        const genIPv6 = (cidr, n) => {
            const [ip, p] = cidr.split('/'), prefix = +p;
            if (!ip || prefix > 128) return [];
            const full = ip.split(':').flatMap(h=>h===''?Array(9-ip.split(':').length).fill('0000'):h.padStart(4,'0')).slice(0,8).join('');
            const bits = 128-prefix, ips = new Set();
            while (ips.size < n) {
                let host = ''; for (let i=0;i<bits;i+=4) host += Math.floor(Math.random()*16).toString(16);
                const hex = (full.slice(0,Math.floor(prefix/4)) + host.padEnd(Math.ceil(bits/4),'0').slice(0,Math.ceil(bits/4))).padEnd(32,'0');
                const parts = []; for (let i=0;i<32;i+=4) parts.push(hex.slice(i,i+4));
                const compressed = parts.join(':').replace(/(:0{4}){2,}/g, '::').replace(/^0+/, '').replace(/:0+$/, '');
                if (compressed !== ip) ips.add(compressed);
            }
            return Array.from(ips);
        };
        const genIPs = (cidr, n) => cidr.includes('.') ? genIPv4(cidr,n).map(ip=>({ip,ipv6:false})) : genIPv6(cidr,n).map(ip=>({ip,ipv6:true}));

        // === Ping & Colo ===
        const ping = async (url, timeout=400) => {
            const ctrl = new AbortController(), id = setTimeout(()=>ctrl.abort(), timeout);
            const t0 = performance.now();
            try {
                await fetch(url, {method:'HEAD', mode:'no-cors', signal:ctrl.signal});
                clearTimeout(id);
                return {ok:true, time:+(performance.now()-t0).toFixed(2)};
            } catch (e) {
                clearTimeout(id);
                return {ok:false, time:400, err: e.name==='AbortError'?'超时':e.message};
            }
        };
        const getColo = async (ip, port, ipv6) => {
            const url = `http://${ipv6?'['+ip+']':ip}:${port}/cdn-cgi/trace`;
            const ctrl = new AbortController(), id = setTimeout(()=>ctrl.abort(), 5000);
            try {
                const res = await fetch(url, {signal:ctrl.signal});
                clearTimeout(id);
                if (!res.ok) return 'Err';
                const text = await res.text();
                const m = text.match(/colo=([A-Z]+)/);
                return m ? m[1] : 'Unk';
            } catch { clearTimeout(id); return 'Err'; }
        };

        // === 10 线程并发测试 ===
        let total = 0;
        const runWorker = async () => {
            while (isRunning && queue.length > 0) {
                const item = queue.shift();
                const {ip, port, ipv6} = item;
                const display = ipv6 ? `[${ip}]` : ip;
                log(`测试 ${display}:${port}`);
                const r = await ping(`http://${display}:${port}/`);
                if (r.ok && r.time < 400) {
                    data.push({ip, port, time:r.time, ipv6, colo:'...' });
                    log(`  成功 ${r.time}ms`);
                    updateResult();
                } else log(`  跳过 ${r.time}ms ${r.err?'('+r.err+')':''}`);
                updateStatus(total - queue.length, total);
            }
        };
        const startWorkers = () => {
            const workers = [];
            for (let i = 0; i < CONCURRENCY; i++) workers.push(runWorker());
            return Promise.allSettled(workers);
        };

        // === 获取 colo 并发 ===
        const fetchColos = async () => {
            if (!data.length) return;
            log(`\n获取 ${data.length} 个 colo...`);
            const promises = data.map(async (d, i) => {
                if (!isRunning) return null;
                const disp = d.ipv6?`[${d.ip}]`:d.ip;
                log(`  获取 ${disp}:${d.port} colo...`);
                const colo = await getColo(d.ip, d.port, d.ipv6);
                if (['Err','Unk'].includes(colo)) {
                    log(`    失败，已移除`);
                    return null;
                } else {
                    log(`    成功 ${colo}`);
                    d.colo = colo;
                    return d;
                }
            });
            const results = await Promise.all(promises);
            data = results.filter(r => r !== null);
            updateResult();
        };

        // === 结束 ===
        const end = async () => {
            log(`\n完成！优质IP: ${data.length}`);
            statusEl.textContent = '优选完成，开始更新DDNS...';
            stop();
            showBest();
            await updateDDNS();
            statusEl.textContent = '全部完成！';
        };

        // === 主函数 ===
        const start = async () => {
            if (isRunning) return;
            clear(); statusEl.textContent = '准备中...';
            const cidrs = new Set();
            cidrInput.value.trim().split('\n').forEach(l=>l.trim()&&l[0]!=='#'&&cidrs.add(l.trim()));
            if (useDefault.checked) {
                try {
                    const res = await fetch('https://raw.githubusercontent.com/cmliu/cmliu/main/CF-CIDR.txt');
                    if (res.ok) (await res.text()).split('\n').forEach(l=>l.trim()&&l[0]!=='#'&&cidrs.add(l.trim()));
                } catch (e) { log(`默认列表加载失败: ${e.message}`); }
            }
            if (!cidrs.size) return log('错误: 无有效 CIDR'), statusEl.textContent = '请填写 CIDR 或勾选默认';
            const n = +ipCount.value, port = +portSel.value;
            queue = [];
            for (const c of cidrs) {
                const ips = genIPs(c, n);
                if (ips.length) { log(`从 ${c.includes(':')?'IPv6':'IPv4'} ${c} 生成 ${ips.length} IP`); queue.push(...ips.map(i=>({...i,port}))); }
            }
            total = queue.length;
            if (!total) return log('错误: 未生成任何IP'), statusEl.textContent = '生成失败';
            log(`共 ${total} 个IP，启动 ${CONCURRENCY} 线程并发测试端口 ${port}...`);
            isRunning = true; startBtn.disabled = true; stopBtn.disabled = false;
            statusEl.textContent = `测试中... 0/${total}`;
            await startWorkers();
            if (isRunning) await fetchColos();
            if (isRunning) await end();
        };

        const stop = () => { isRunning = false; queue = []; stopBtn.disabled = true; startBtn.disabled = false; statusEl.textContent = '已停止'; };
        const clear = () => { logEl.textContent = ''; resultEl.textContent = '暂无结果'; data = []; bestResult.innerHTML = ''; ddnsLog.innerHTML = ''; };

        // === 事件绑定 ===
        const bindEvents = () => {
            startBtn.onclick = () => {
                log('手动点击开始优选');
                start();
            };
            stopBtn.onclick = stop;

            const delayStart = () => {
                if (autoStartTimer) clearTimeout(autoStartTimer);
                statusEl.textContent = '配置变更，2秒后自动重启...';
                autoStartTimer = setTimeout(() => {
                    if (!isRunning) {
                        log('配置变更自动重启优选');
                        start();
                    }
                }, 2000);
            };
            [ipCount, portSel, cidrInput, useDefault, lineType].forEach(el => el.addEventListener('change', delayStart));
            cidrInput.addEventListener('input', delayStart);
        };

        // === 初始化 ===
        document.addEventListener('DOMContentLoaded', () => {
            cidrInput.value = `103.21.244.0/22\n173.245.48.0/20\n2606:4700::/32`;
            bindEvents();

            setTimeout(() => {
                if (!isRunning) {
                    statusEl.textContent = '自动开始优选...';
                    log('页面加载完成，自动开始优选');
                    start();
                }
            }, 3000);
        });
    </script>
</body>
</html>
